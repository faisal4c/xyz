#include <iostream>
#include <queue>
#include <string>
#include <cmath>
#include <stack>
#include <set>
#include <vector>
#include <climits>
#include <algorithm>
#include <map>
#include <list>
#include <unordered_map>
#include <cmath>

using namespace std;

void bfs(int n,int sv,int** edges,bool* visited){
    queue<int> myqueue;

    myqueue.push(sv);

    while (myqueue.size()!=0)
    {   
        int vertex=myqueue.front();
        for (int i = 0; i < n; i++)
        {
            if(visited[i]==0 && edges[vertex][i]==1){
                myqueue.push(i);
            }
        }
        
        if(visited[vertex]==0){
            cout<<vertex<<" ";
            visited[vertex]=1;
        }
        myqueue.pop();    
    }
}

int main(){
    int n,e;//n->no.of vertex, e->no.of edges
    cin>>n>>e;
    int **edges=new int*[n];
    for (int i = 0; i < n; i++)
    {
        int* row=new int[n];
        for (int j = 0; j < n; j++)
        {
            row[j]=0;
        }
        edges[i]=row;
    }
    
    for (int i = 0; i < e; i++)
    {
        int f,s;
        cin>>f>>s;
        edges[f][s]=1;
        edges[s][f]=1;
    }

    bool visited[n]={0};

    bfs(n,0,edges,visited);

    for (int i = 0; i < n; i++)
    {
        if(visited[i]==0){
            cout<<endl;
            bfs(n,i,edges,visited);
        }
    }
    
    return 0;
}
        
    

    



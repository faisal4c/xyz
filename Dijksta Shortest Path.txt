//======================================================>>>>MY CODE<<<<<===================================================================



#include <iostream>
#include <queue>
#include <string>
#include <cmath>
#include <stack>
#include <set>
#include <vector>
#include <climits>
#include <algorithm>
#include <map>
#include <list>
#include <unordered_map>
#include <cmath>

using namespace std;

int findMinVertex(int n,int* path,int* visited){
    int minPath=INT_MAX;
    int minIdx=-1;
    for (int i = 0; i < n; i++)
    {
        if(visited[i]==0 && path[i]<minPath){
            minPath=path[i];
            minIdx=i;
        }
    }
    return minIdx;
}

void dijkstra(int n,int** edges,int source,int* path,int* visited){
    path[source]=0;
    visited[source]=0;
    for (int i = 0; i < n; i++)
    {
        if(i==source){
            continue;
        }
        path[i]=INT_MAX;
        visited[i]=0;
    }
    
    for (int i = 0; i < n-1; i++)
    {   
        visited[source]=1;
        for (int j = 0; j < n; j++)
        {
            if(edges[source][j]>0 && visited[j]==0){
                if(edges[source][i]+path[source]<path[j]){
                    path[j]=edges[source][j]+path[source];
                }
            }
        }
        int minVertex=findMinVertex(n,path,visited);
        source=minVertex;
    }
}

int main()
{
    int n, e; // n->no.of vertex, e->no.of edges
    cin >> n >> e;
    int **edges = new int *[n];
    for (int i = 0; i < n; i++)
    {
        int *row = new int[n];
        for (int j = 0; j < n; j++)
        {
            row[j] = 0;
        }
        edges[i] = row;
    }

    for (int i = 0; i < e; i++)
    {
        int f, s, w;
        cin >> f >> s >> w;
        edges[f][s] = w;
        edges[s][f] = w;
    }

    
    int* visited=new int[n];
    int* path=new int[n];
    dijkstra(n,edges,0,path,visited);
    for (int i = 0; i < n; i++)
    {
        cout<<path[i]<<" ";
    }
    
    
    
    return 0;
}



=========================>>> using priority queue  <<<<======================================



#include <iostream>
#include <queue>
#include <string>
#include <cmath>
#include <stack>
#include <set>
#include <vector>
#include <climits>
#include <algorithm>
#include <map>
#include <list>
#include <unordered_map>
#include <cmath>

using namespace std;
class node
{
    public:
    int v;
    string psf;
    int wsf;//weight so far for the given path to the given vertex
};

bool operator<(node n1,node n2){
    return n1.wsf>n2.wsf;
}

void dijkstra(int sv,int n,int** edges,int* visited){
    node n1;
    n1.v=sv;
    n1.psf=to_string(sv);
    n1.wsf=0;

    priority_queue<node> pq;
    pq.push(n1);

    while (pq.size()!=0)
    {
        node topNode=pq.top();
        pq.pop();
        if(visited[topNode.v]==1){
            continue;
        }
        visited[topNode.v]=1;
        cout<<topNode.v<<" via "<<topNode.psf<<" with path weight"<<topNode.wsf<<endl;
        for (int i = 0; i < n; i++)
        {
            if(edges[topNode.v][i]>0 && visited[i]==0){
                node newNode;
                newNode.v=i;
                newNode.psf=topNode.psf+to_string(i);
                newNode.wsf=topNode.wsf+edges[topNode.v][i];
                pq.push(newNode);
            }
        }
    }
}

int main()
{
    int n, e; // n->no.of vertex, e->no.of edges
    cin >> n >> e;
    int **edges = new int *[n];
    for (int i = 0; i < n; i++)
    {
        int *row = new int[n];
        for (int j = 0; j < n; j++)
        {
            row[j] = 0;
        }
        edges[i] = row;
    }

    for (int i = 0; i < e; i++)
    {
        int f, s,w;
        cin >> f >> s>>w;
        edges[f][s] = w;
        edges[s][f] = w;
    }

    
    int* visited=new int[n];
    for (int i = 0; i < n; i++)
    {
        visited[i]=0;
    }
    
    
    dijkstra(0,n,edges,visited);
    
    return 0;
}

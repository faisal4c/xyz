//======================>>>It is printing all the paths posible<<=======================


#include <iostream>
#include <queue>
#include <string>
#include <cmath>
#include <stack>
#include <set>
#include <vector>
#include <climits>
#include <algorithm>
#include <map>
#include <list>
#include <unordered_map>
#include <cmath>

using namespace std;

void printPath(int sv,int ev,int n,int **edges,int* visited,string path){
    if(sv==ev){
        for (int i = 0; i < path.size(); i++)
        {
            cout<<path[i]<<" ";
        } 
        cout<<sv<<endl;
        return;
    }
    visited[sv]=1;
    path+=to_string(sv);
    for (int i = 0; i < n; i++)
    {
        if(edges[sv][i]==1 && i!=sv && visited[i]==0){
            visited[i]=1;
            printPath(i,ev,n,edges,visited,path);
            visited[i]=0;
        }
    }
    visited[sv]=0;
    path=path.substr(0,path.size()-1);
}

int main(){
    int n,e;//n->no.of vertex, e->no.of edges
    cin>>n>>e;
    int **edges=new int*[n];
    for (int i = 0; i < n; i++)
    {
        int* row=new int[n];
        for (int j = 0; j < n; j++)
        {
            row[j]=0;
        }
        edges[i]=row;
    }
    
    for (int i = 0; i < e; i++)
    {
        int f,s;
        cin>>f>>s;
        edges[f][s]=1;
        edges[s][f]=1;
    }

    int visited[n];
    for (int i = 0; i < n; i++)
    {
        visited[i]=0;
    }
    queue<int> path;
    printPath(0,4,n,edges,visited,"");
    
    return 0;
}
        
    

    


============>>>This Returns First path in DFS<<<================================





#include <iostream>
#include <queue>
#include <string>
#include <cmath>
#include <stack>
#include <set>
#include <vector>
#include <climits>
#include <algorithm>
#include <map>
#include <list>
#include <unordered_map>
#include <cmath>

using namespace std;

bool printPath(int sv,int ev,int n,int **edges,int* visited,vector<int> &path){
    if(sv==ev){
        for (int i = 0; i < path.size(); i++)
        {
            cout<<path[i]<<" ";
        }
        cout<<sv<<endl;
        return 1;
    }
    visited[sv]=1;
    path.push_back(sv);
    for (int i = 0; i < n; i++)
    {   
        if(edges[sv][i]==1 && i!=sv && visited[i]==0){
            bool result=printPath(i,ev,n,edges,visited,path);
            if(result==1){
                return 1;
            }
        }
    }
    path.pop_back();
    return 0;
}

int main(){
    int n,e;//n->no.of vertex, e->no.of edges
    cin>>n>>e;
    int **edges=new int*[n];
    for (int i = 0; i < n; i++)
    {
        int* row=new int[n];
        for (int j = 0; j < n; j++)
        {
            row[j]=0;
        }
        edges[i]=row;
    }
    
    for (int i = 0; i < e; i++)
    {
        int f,s;
        cin>>f>>s;
        edges[f][s]=1;
        edges[s][f]=1;
    }

    int visited[n];
    for (int i = 0; i < n; i++)
    {
        visited[i]=0;
    }
    vector<int> path;
    printPath(0,4,n,edges,visited,path);
    
    return 0;
}
        
    

    


